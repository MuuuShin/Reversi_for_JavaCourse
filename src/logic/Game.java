package logic;

import gui.model.ChessPiece;

import java.util.ArrayList;
import java.util.Arrays;

public class Game {
    private int gid;
    // Game ID. The game ID of each game is unique and is automatically generated by
    // class Game. Starting from 1, each new game’s ID will increase by 1.
    private String name;
    // Game name.
    private static int gameCnt = 1;
    // Initialized to 1, increased by 1 every time a Game object is created
    private Player whitePlayer;
    // The white player object corresponding to this game.
    private Player blackPlayer;
    public ChessPiece currentplayer=ChessPiece.BLACK;
    // The black player object corresponding to this game.
    private ArrayList<Step> stepList;
    // The list of steps.
    private int[][] board;
    // The board of the game. The size of the board is 8x8.
    private int gameMode = 0;
    private boolean isOver = false;

    public static void initializeGameCnt(int gamecnt) {
        gameCnt = gamecnt;
    }

    public Game(String name, Player whitePlayer, Player blackPlayer) {
        stepList = new ArrayList<Step>();
        board = new int[8][8];
        this.name = name;
        this.gid = gameCnt;
        gameCnt++;
        this.whitePlayer = whitePlayer;
        this.blackPlayer = blackPlayer;
        this.board[3][3] = 1;
        this.board[4][4] = 1;
        this.board[3][4] = -1;
        this.board[4][3] = -1;
    }

    public Game(String name, Player whitePlayer, Player blackPlayer, int gid) {
        this.name = name;
        this.whitePlayer = whitePlayer;
        this.blackPlayer = blackPlayer;
        this.gid = gid;
    }

    public Game(String name, Player whitePlayer, Player blackPlayer, int gid, ArrayList<Step> stepList, int[][] board, int gameMode, boolean isOver,String currentPlayer) {
        this.name = name;
        this.whitePlayer = whitePlayer;
        this.blackPlayer = blackPlayer;
        this.gid = gid;
        this.board = board;
        this.stepList = stepList;
        this.gameMode = gameMode;
        this.isOver = isOver;
        if("BLACK".equals(currentPlayer)){
            currentplayer=ChessPiece.BLACK;
        }else{
            currentplayer=ChessPiece.WHITE;
        }

    }

    // Constructor, automatically generate game ID and Game object according to the
    // name provided by the user. Initialize white player, black player, stepList,
    // and board.
    // For a list with no elements in it, its size should be 0 and its reference
    // should not be null.
    // For a board that has not to be set:
    // 1. Its size should be 8*8.
    // 2. board[3][3] and board[4][4] should be white(1). board[3][4] and
    // board[4][3] should be black(-1)
    // 3. Its reference should not be null.
    public int getGid() {
        return this.gid;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    // Modify game name.
    public static int getGameCnt() {
        return gameCnt;
    }

    public Player getWhitePlayer() {
        return this.whitePlayer;
    }

    public Player getBlackPlayer() {
        return this.blackPlayer;
    }

    public ArrayList<Step> getStepList() {
        System.out.println("3ewfregargarwarfa"+stepList.size());
        return this.stepList;
    }

    public boolean checkStep(int sid) {
        for (Step steps : this.stepList) {
            if (steps.getSid() == sid) {
                return true;
            }
        }
        return false;
    }

    // If a step is not in the step list, return false.
    // Otherwise return true.
    public boolean addStep(Step step) {
        if (checkStep(step.getSid())) {
            return false;
        }
        this.stepList.add(step);
        return true;
    }

    // If a step is in the step list (i.e. The sid is in the step list), return
    // false.
    // Otherwise add the step into the step list and return true.
    // You are not required to change the board in this method.
    public int[][] getBoard() {
        int[][] outBoard = new int[8][8];
        for (int i = 0; i <= 7; i++) {
            System.arraycopy(this.board[i], 0, outBoard[i], 0, this.board[i].length);
        }
        return outBoard;
    }

    public void setBoard(int[][] board) {
        for (int i = 0; i <= 7; i++) {
            System.arraycopy(board[i], 0, this.board[i], 0, board[i].length);
        }
    }

    public void gameOver() {
        isOver = true;
        //Boolean full = new Boolean(true);//用于判断棋盘是否已下满
    }

    public boolean getIsOver() {
        return isOver;
    }

    public int getGameMode() {
        return gameMode;
    }

    public void setGameMode(int gameMode) {
        this.gameMode = gameMode;
    }

    // Change the game result
    // Instead of pass the reference of board, you should copy the value from the
    // argument board into the board of Game.
    public String toString() {
        return "\"name\": \"" + this.name + "\", \"gid\": " + this.gid + ", \"currentPlayer\": \"" + this.currentplayer+"\", \"gameMode\": " + this.gameMode + ", \"isOver\": " + this.isOver + ", \"whitePlayerId\": " + this.whitePlayer.getPid()
                + ", \"blackPlayerId\": " + this.blackPlayer.getPid() + ", \"stepList\": " + toStringArrayList(this.stepList)
                + ", \"board\": " + toStringDoubleArray(this.board);
    }

    public String toStringDoubleArray(int[][] board) {
        String ans = "[";
        for (int i = 0; i <= 7; i++) {
            ans = ans + Arrays.toString(board[i]);
            if (i != 7) {
                ans = ans + ", ";
            }
        }
        ans = ans + "]";
        return ans;
    }

    public String toStringArrayList(ArrayList<Step> step) {
        String ans = "[";
        for (Step steps : step) {
            ans += "{";
            ans = ans + "\"sid\": ";
            ans = ans + steps.getSid();
            ans = ans + ", \"rowIndex\": ";
            ans = ans + steps.getRowIndex();
            ans = ans + ", \"columnIndex\": ";
            ans = ans + steps.getColumnIndex();
            ans = ans + ", \"color\": ";
            ans = ans + steps.getColor();
            ans += "}, ";
        }
        if (ans.length() >= 3) {
            ans = ans.substring(0, ans.length() - 2);
        }
        ans = ans + "]";
        return ans;
    }
    // When print an object of this class, follow the format: "Game: %s, gid: %d,
    // whitePlayerId: %d, blackPlayerId: %d, stepList: %s, board: %s"
    // 1. The stepList String should be in the format: "[sid: x, rowIndex: x,
    // columnIndex: x, color: x, sid: x, rowIndex: x, columnIndex: x, color: x,
    // ...]"
    // 2. The board string should be in the format: "[[x, x, x, x, x, x, x, x], [x,
    // x, x, x, x, x, x, x], ...]"
    // 3. Without quotes

    public static void main(String[] args) {
    }
}
